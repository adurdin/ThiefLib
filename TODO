ActReact.hh
	interfaces:
		* IActReactSrv
		* everything in <lg/actreact.h>
		* class reaction_kind
	messages:
		* sStimMsg ("*Stimulus")
	links:
		* Receptron - sReceptron
		* StimSensor - tSensorCount
		* ReactParam - ReceptronID
		* arSrc - sStimSourceData
		* arSrcDesc - sStimSourceDesc
		* FlowContact - sContact
		* ScriptContact - sContact
	properties:
		* Act/React\Source Scale = arSrcScale
		* AI: Utility\Is Knockout = StimKO
		* Game: Dark\BloodCause = BloodCause
		* Game: Dark\BloodMaxDamage = BloodMaxDmg

Tweq.hh
	messages:
		* sTweqMsg ("TweqComplete")
	enums:
		* eTweqAction
		* eTweqFlag
		* eTweqType
		* eTweqOperation
		* eTweqDirection
	properties:
		* Tweq\Delete = CfgTweqDelete
		* Tweq\DeleteState = StTweqDelete
		* Tweq\Emit = CfgTweqEmit
		* Tweq\Emit2 = CfgTweq2Emit
		* Tweq\Emit3 = CfgTweq3Emit
		* Tweq\Emit4 = CfgTweq4Emit
		* Tweq\Emit5 = CfgTweq5Emit
		* Tweq\Emitter2State = StTweq2Emit
		* Tweq\Emitter3State = StTweq3Emit
		* Tweq\Emitter4State = StTweq4Emit
		* Tweq\Emitter5State = StTweq5Emit
		* Tweq\EmitterState = StTweqEmit
		* Tweq\Flicker = CfgTweqBlink
		* Tweq\FlickerState = StTweqBlink
		* Tweq\Joints = CfgTweqJoints
		* Tweq\JointsState = StTweqJoints
		* Tweq\Lock = CfgTweqLock
		* Tweq\LockState = StTweqLock
		* Tweq\Models = CfgTweqModels
		* Tweq\ModelsState = StTweqModels
		* Tweq\Rotate = CfgTweqRotate
		* Tweq\RotateState = StTweqRotate
		* Tweq\Scale = CfgTweqScale
		* Tweq\ScaleState = StTweqScale

Novel messages/wrappers
	* ConversationDoneMessage: IAIConversationManager::ListenConversationEnd
	* HierarchyChangeMessage: ITraitManager::Listen (per DH2)
	* ObjectChangeMessage: IObjectSystem::Listen (per DH2)
	* ObjectiveChangeMessage: from appropriate QuestChange messages
	* ParameterChangeMessage: from ParameterCache activity

TNH/NV/TW features
	* ParameterCache: NVScript-style syntax (script name prefix, object targetting)
	* QuestVariable: reference syntax parsing per cQVarText, cQVarProcessor, TWBaseScript, et al.
	* Script: debug levels per TWScript
	* TrapTrigger: requirement counting per cRequirement
	* TrapTrigger: NVScript-style features (on, off, count, capacitor, falloff, failchance, dest)

Other
	* AI, Types: split each into two or more units.
	* EnumCoding: encoding and decoding of bitmasks
	* Objective: VictoryCheck(er)-equivalent functionality per lg/convict.h
	* PropField, LinkField: add array option for sequences of equivalent fields?
	* (all): use C++11 features added in G++ 4.8 once MinGW-w64 is upgraded
	* (all): use boost::bimap once 1.55 is released (supporting initializer_list)
	* Create full documentation. (!!!)

